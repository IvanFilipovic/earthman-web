{"file":"MobileColorSlider-DLe-Ur6a.js","mappings":";;;;;;;;;;;AA+BA,UAAM,QAAQ;AAId,UAAM,UAAU,IAAI,CAAC;AACrB,UAAM,CAAC,WAAW,MAAM,IAAI,cAAc;AAAA,MACxC,MAAM;AAAA,MACN,SAAS;AAAA,MACT,aAAa,GAAG;AACd,gBAAQ,QAAQ,EAAE,MAAM,QAAQ;AAAA,MAClC;AAAA,IAAA,CACD;AAGD;AAAA,MACE,MAAM,MAAM,QAAQ,UAAU;AAAA,MAC9B,YAAY;AACV,cAAM,SAAA;AACN,YAAI,OAAO,OAAO;AAChB,iBAAO,MAAM,OAAA;AACb,iBAAO,MAAM,UAAU,CAAC;AACxB,kBAAQ,QAAQ;AAAA,QAClB;AAAA,MACF;AAAA,IAAA;AAGW;AAAA,MAAS,MACpB,OAAO,QAAQ,CAAC,GAAG,MAAM,OAAO,MAAM,MAAM,QAAQ,OAAO,MAAM,EAAE,KAAA,CAAM,IAAI,CAAA;AAAA,IAAC;;AAzDnE,UAAA,QAAA,QAAQ,QAAM;AAAE,cAAA,OAAAA,eAAAC,WAAA,EAAA,OAAM,qBAAiB,MAAA,CAAA,CAAA,oCAAA;sBAG3B,QAAA,QAAM,CAAf,GAAG,MAAC;qEAKT,OAAK,EAAE,YAAY,kBACnB,OAAK,EAAE,KAAK;;;;;;;;;;;;;;;","names":["_ssrRenderAttrs","_mergeProps"],"sources":["../../../../components/MobileColorSlider.vue"],"sourcesContent":["<template>\n  <div v-if=\"colors?.length\" class=\"block md:hidden\">\n    <div ref=\"sliderRef\" class=\"keen-slider\">\n      <div\n        v-for=\"(c, i) in colors\"\n        :key=\"c.variant_slug || i\"\n        class=\"keen-slider__slide\"\n      >\n        <img\n          :src=\"c.avatar_image\"\n          :alt=\"c.color\"\n          class=\"w-full h-auto object-cover transition-opacity duration-200 border border-text_color/30\"\n          loading=\"lazy\"\n          @click=\"$emit('go', c.variant_slug)\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, nextTick, ref, watch } from 'vue'\nimport { useKeenSlider } from 'keen-slider/vue.es'\nimport 'keen-slider/keen-slider.min.css'\n\ntype ColorItem = {\n  variant_slug: string\n  avatar_image: string\n  color: string\n}\n\nconst props = defineProps<{\n  colors: ColorItem[] | null | undefined\n}>()\n\nconst current = ref(0)\nconst [sliderRef, slider] = useKeenSlider({\n  loop: true,\n  initial: 0,\n  slideChanged(s) {\n    current.value = s.track.details.rel\n  },\n})\n\n// keep slider in sync if the color list changes (e.g., different product data)\nwatch(\n  () => props.colors?.length ?? 0,\n  async () => {\n    await nextTick()\n    if (slider.value) {\n      slider.value.update()\n      slider.value.moveToIdx(0)\n      current.value = 0\n    }\n  }\n)\n\nconst dots = computed(() =>\n  slider.value ? [...Array(slider.value.track.details.slides.length).keys()] : []\n)\n</script>\n"],"version":3}